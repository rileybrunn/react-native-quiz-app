{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useState } from 'react';\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { Button, ButtonGroup, CheckBox, Text } from '@rneui/themed';\nimport * as Font from 'expo-font';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref4 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    paddingTop: 20\n  },\n  bigText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    paddingTop: 25,\n    paddingBottom: 25\n  },\n  summaryText: {\n    fontSize: 35,\n    fontWeight: 'bold',\n    padding: 15\n  },\n  scoreText: {\n    fontSize: 15,\n    fontWeight: 'bold',\n    padding: 15\n  },\n  answerButtons: {\n    padding: 10,\n    width: 20\n  },\n  nextButton: {\n    paddingTop: 20\n  }\n});\nvar Stack = createNativeStackNavigator();\nvar questions = [{\n  \"prompt\": \"Which shark has been found in the Mississippi River as far inland as Illinois?\",\n  \"type\": \"multiple-choice\",\n  \"choices\": [\"Tiger Shark\", \"Reef Shark\", \"Bull Shark\", \"Nurse Shark\"],\n  \"correct\": 2\n}, {\n  \"prompt\": \"Which are in the top 5 biggest shark species?\",\n  \"type\": \"multiple-answer\",\n  \"choices\": [\"Whale Shark\", \"Spiny Dogfish\", \"Horn Shark\", \"Basking Shark\"],\n  \"correct\": [0, 3]\n}, {\n  \"prompt\": \"Blue sharks are actually blue.\",\n  \"type\": \"true-false\",\n  \"choices\": [\"True\", \"False\"],\n  \"correct\": 0\n}];\nexport default function App() {\n  cacheFonts([FontAwesome.font]);\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Question\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Question\",\n        initialParams: {\n          questionNumber: 0,\n          data: questions,\n          userChoices: []\n        },\n        options: {\n          headerShown: false\n        },\n        children: function children(props) {\n          return _jsx(Question, _objectSpread({}, props));\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"Summary\",\n        component: SummaryScreen,\n        initialParams: {\n          questionNumber: questions.length - 1,\n          data: questions,\n          userChoices: [[]]\n        },\n        options: {\n          headerShown: false\n        }\n      })]\n    })\n  });\n}\nexport function Question(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  cacheFonts([FontAwesome.font]);\n  var _route$params = route.params,\n    data = _route$params.data,\n    userChoices = _route$params.userChoices,\n    questionNumber = _route$params.questionNumber;\n  var _data$questionNumber = data[questionNumber],\n    choices = _data$questionNumber.choices,\n    prompt = _data$questionNumber.prompt,\n    type = _data$questionNumber.type;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedIndex = _useState2[0],\n    setSelectedIndex = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedIndexes = _useState4[0],\n    setSelectedIndexes = _useState4[1];\n  var nextQuestion = function nextQuestion() {\n    var nextQuestion = questionNumber + 1;\n    if (type !== 'multiple-answer') {\n      userChoices.push(selectedIndex);\n      console.log(selectedIndex);\n    } else {\n      userChoices.push(selectedIndexes);\n      console.log(selectedIndexes);\n    }\n    if (nextQuestion < questions.length) {\n      navigation.navigate('Question', {\n        questionNumber: nextQuestion,\n        questions: questions,\n        userChoices: userChoices\n      });\n    } else {\n      navigation.navigate('Summary', {\n        questionNumber: nextQuestion,\n        questions: questions,\n        userChoices: userChoices\n      });\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.bigText,\n      children: prompt\n    }), type !== 'multiple-answer' ? _jsx(ButtonGroup, {\n      testID: \"choices\",\n      sty: true,\n      buttons: choices,\n      vertical: true,\n      selectedIndex: selectedIndex,\n      onPress: function onPress(value) {\n        setSelectedIndex(value);\n      }\n    }) : _jsx(ButtonGroup, {\n      testID: \"choices\",\n      buttons: choices,\n      vertical: true,\n      selectMultiple: true,\n      selectedIndexes: selectedIndexes,\n      onPress: function onPress(value) {\n        setSelectedIndexes(value);\n      }\n    }), _jsx(Button, {\n      testID: \"next-question\",\n      style: styles.nextButton,\n      onPress: nextQuestion,\n      title: \"Next\"\n    })]\n  });\n}\nexport function SummaryScreen(_ref2) {\n  var route = _ref2.route;\n  cacheFonts([FontAwesome.font]);\n  var calculateCorrect = function calculateCorrect(userSelected, correct, type) {\n    var userCorrect = false;\n    if (type == 'multiple-answer') {\n      userCorrect = userSelected.sort().toString() === correct.sort().toString();\n    } else {\n      userCorrect = userSelected == correct;\n    }\n    return userCorrect;\n  };\n  var calculateCorrectSet = function calculateCorrectSet(userSelected, correct, type) {\n    var userCorrect = false;\n    if (type == 'multiple-answer') {\n      userCorrect = correct.every(function (item) {\n        return userSelected.includes(item);\n      }) && userSelected.every(function (item) {\n        return correct.includes(item);\n      });\n    } else {\n      userCorrect = userSelected == correct;\n    }\n    return userCorrect;\n  };\n  var totalScore = 0;\n  for (var i = 0; i < route.params.data.length; i++) {\n    if (calculateCorrect(route.params.userChoices[i], route.params.data[i].correct, route.params.data[i].type)) {\n      totalScore++;\n    }\n  }\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.summaryText,\n      children: \"Summary\"\n    }), _jsxs(Text, {\n      testID: \"total\",\n      style: styles.scoreText,\n      children: [\"Score: \", totalScore, \"/3\"]\n    }), _jsx(FlatList, {\n      data: route.params.data,\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item,\n          index = _ref3.index;\n        var choices = item.choices,\n          prompt = item.prompt,\n          type = item.type,\n          correct = item.correct;\n        var userSelected = route.params.userChoices[index];\n        var userCorrect = calculateCorrect(userSelected, correct, type);\n        return _jsxs(View, {\n          children: [_jsx(Text, {\n            style: styles.bigText,\n            children: prompt\n          }), choices.map(function (value, choiceIndex) {\n            var incorrect = false;\n            var userDidSelect = false;\n            if (type == 'multiple-answer') {\n              userDidSelect = userSelected.includes(choiceIndex);\n              incorrect = userDidSelect && !correct.includes(choiceIndex);\n            } else {\n              userDidSelect = userSelected == choiceIndex;\n              incorrect = userDidSelect && userSelected !== correct;\n            }\n            return _jsx(CheckBox, {\n              containerStyle: {\n                backgroundColor: userDidSelect ? incorrect == false ? 'lightgreen' : 'gray' : undefined\n              },\n              checked: type == 'multiple-answer' ? correct.includes(choiceIndex) : correct == choiceIndex,\n              textStyle: {\n                textDecorationLine: incorrect ? 'line-through' : undefined\n              },\n              title: value\n            }, value);\n          })]\n        }, index);\n      }\n    })]\n  });\n}","map":{"version":3,"names":["useState","React","NavigationContainer","createNativeStackNavigator","Button","ButtonGroup","CheckBox","Text","Font","FontAwesome","jsx","_jsx","jsxs","_jsxs","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref4","font","loadAsync","_x2","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","paddingHorizontal","paddingTop","bigText","fontSize","fontWeight","paddingBottom","summaryText","padding","scoreText","answerButtons","width","nextButton","Stack","questions","App","children","Navigator","initialRouteName","Screen","name","initialParams","questionNumber","data","userChoices","options","headerShown","props","Question","_objectSpread","component","SummaryScreen","length","_ref","route","navigation","_route$params","params","_data$questionNumber","choices","prompt","type","_useState","_useState2","_slicedToArray","selectedIndex","setSelectedIndex","_useState3","_useState4","selectedIndexes","setSelectedIndexes","nextQuestion","push","console","log","navigate","View","style","testID","sty","buttons","vertical","onPress","value","selectMultiple","title","_ref2","calculateCorrect","userSelected","correct","userCorrect","sort","toString","calculateCorrectSet","every","item","includes","totalScore","i","FlatList","renderItem","_ref3","index","choiceIndex","incorrect","userDidSelect","containerStyle","undefined","checked","textStyle","textDecorationLine"],"sources":["C:/Users/Frank/Desktop/DIG 4639C/dig4639-s24-react-rileybrunn/unit2/lab10/App.js"],"sourcesContent":["import { FlatList, StyleSheet, View } from 'react-native'\nimport { useState } from 'react'\nimport * as React from 'react'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\nimport { Button, ButtonGroup, CheckBox, Text } from '@rneui/themed'\nimport * as Font from 'expo-font'\nimport FontAwesome from '@expo/vector-icons/FontAwesome'\n\n\n\nasync function cacheFonts(fonts) {\n  return fonts.map(async (font) => await Font.loadAsync(font))\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    paddingTop: 20,\n  },\n  bigText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    paddingTop: 25,\n    paddingBottom: 25,\n  },\n  summaryText: {\n    fontSize: 35,\n    fontWeight: 'bold',\n    padding: 15,\n  },\n  scoreText: {\n    fontSize: 15,\n    fontWeight: 'bold',\n    padding: 15,\n  },\n  answerButtons: {\n    padding: 10,\n    width: 20,\n  },\n  nextButton: {\n    paddingTop: 20,\n  },\n})\n\n\n\nconst Stack = createNativeStackNavigator()\n\nconst questions = [\n  {\n    \"prompt\": \"Which shark has been found in the Mississippi River as far inland as Illinois?\",\n    \"type\": \"multiple-choice\",\n    \"choices\": [\n      \"Tiger Shark\",\n      \"Reef Shark\",\n      \"Bull Shark\",\n      \"Nurse Shark\",\n    ],\n    \"correct\": 2\n  },\n  {\n    \"prompt\": \"Which are in the top 5 biggest shark species?\",\n    \"type\": \"multiple-answer\",\n    \"choices\": [\n      \"Whale Shark\",\n      \"Spiny Dogfish\",\n      \"Horn Shark\",\n      \"Basking Shark\",\n    ],\n    \"correct\": [0, 3]\n  },\n  {\n    \"prompt\": \"Blue sharks are actually blue.\",\n    \"type\": \"true-false\",\n    \"choices\": [\n      \"True\",\n      \"False\",\n    ],\n    \"correct\": 0\n  },\n]\n\n\n\nexport default function App() {\n  cacheFonts([FontAwesome.font])\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName='Question'>\n        <Stack.Screen\n          name='Question'\n          initialParams={{\n            questionNumber: 0,\n            data: questions,\n            userChoices: [],\n          }}\n          options={{ headerShown: false }}\n        >\n          {(props) => <Question {...props} />}\n        </Stack.Screen>\n        <Stack.Screen\n          name='Summary'\n          component={SummaryScreen}\n          initialParams={{\n            questionNumber: questions.length - 1,\n            data: questions,\n            userChoices: [[]],\n          }}\n          options={{ headerShown: false }}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  )\n}\n\n\n\nexport function Question({ route, navigation }) {\n  cacheFonts([FontAwesome.font])\n  const { data, userChoices, questionNumber } = route.params\n  let { choices, prompt, type } = data[questionNumber]\n  let [selectedIndex, setSelectedIndex] = useState(null)\n  let [selectedIndexes, setSelectedIndexes] = useState([])\n\n  let nextQuestion = () => {\n    let nextQuestion = questionNumber + 1\n    if (type !== 'multiple-answer') {\n      userChoices.push(selectedIndex)\n      console.log(selectedIndex)\n    } else {\n      userChoices.push(selectedIndexes)\n      console.log(selectedIndexes)\n    }\n    if (nextQuestion < questions.length) {\n      navigation.navigate('Question', {\n        questionNumber: nextQuestion,\n        questions,\n        userChoices,\n      })\n    } else {\n      navigation.navigate('Summary', {\n        questionNumber: nextQuestion,\n        questions,\n        userChoices,\n      })\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text\n      style={styles.bigText}\n      >{prompt}</Text>\n      {type !== 'multiple-answer' ? (\n        <ButtonGroup\n          testID='choices'\n          sty\n          buttons={choices}\n          vertical\n          selectedIndex={selectedIndex}\n          onPress={(value) => {\n            setSelectedIndex(value)\n          }}\n        />\n      ) : (\n        <ButtonGroup\n          testID='choices'\n          buttons={choices}\n          vertical\n          selectMultiple\n          selectedIndexes={selectedIndexes}\n          onPress={(value) => {\n            setSelectedIndexes(value)\n          }}\n        />\n      )}\n      <Button\n        testID='next-question'\n        style={styles.nextButton}\n        onPress={nextQuestion}\n        title='Next'\n      />\n    </View>\n  )\n}\n\n\n\nexport function SummaryScreen({ route }) {\n  cacheFonts([FontAwesome.font])\n  let calculateCorrect = (userSelected, correct, type) => {\n    let userCorrect = false\n    if (type == 'multiple-answer') {\n      userCorrect = userSelected.sort().toString() === correct.sort().toString()\n    } else {\n      userCorrect = userSelected == correct\n    }\n    return userCorrect\n  }\n  let calculateCorrectSet = (userSelected, correct, type) => {\n    let userCorrect = false\n    if (type == 'multiple-answer') {\n      userCorrect =\n        correct.every((item) => userSelected.includes(item)) &&\n        userSelected.every((item) => correct.includes(item))\n    } else {\n      userCorrect = userSelected == correct\n    }\n    return userCorrect\n  }\n  let totalScore = 0\n  for (let i = 0; i < route.params.data.length; i++) {\n    if (\n      calculateCorrect(\n        route.params.userChoices[i],\n        route.params.data[i].correct,\n        route.params.data[i].type\n      )\n    ) {\n      totalScore++\n    }\n  }\n\n  return (\n    <View style={styles.container}>\n      <Text\n      style={styles.summaryText}\n      >Summary</Text>\n      <Text testID='total'\n      style={styles.scoreText}\n      >Score: {totalScore}/3</Text>\n      <FlatList\n        data={route.params.data}\n        renderItem={({ item, index }) => {\n          let { choices, prompt, type, correct } = item\n          let userSelected = route.params.userChoices[index]\n          let userCorrect = calculateCorrect(userSelected, correct, type)\n\n          return (\n            <View key={index}>\n              <Text\n              style={styles.bigText}\n              >{prompt}</Text>\n              {choices.map((value, choiceIndex) => {\n                let incorrect = false\n                let userDidSelect = false\n                if (type == 'multiple-answer') {\n                  userDidSelect = userSelected.includes(choiceIndex)\n                  incorrect = userDidSelect && !correct.includes(choiceIndex)\n                } else {\n                  userDidSelect = userSelected == choiceIndex\n                  incorrect = userDidSelect && userSelected !== correct\n                }\n                return (\n                  <CheckBox\n                    containerStyle={{\n                      backgroundColor: userDidSelect\n                      ? incorrect == false\n                      ? 'lightgreen'\n                      : 'gray'\n                      : undefined,\n                    }}\n                    checked={\n                      type == 'multiple-answer'\n                      ? correct.includes(choiceIndex)\n                      : correct == choiceIndex\n                    }\n                    textStyle={{\n                      textDecorationLine: incorrect\n                      ? 'line-through'\n                      : undefined,\n                    }}\n                    key={value}\n                    title={value}\n                  ></CheckBox>\n                )\n              })}\n            </View>\n          )\n        }}\n      ></FlatList>\n    </View>\n  )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}