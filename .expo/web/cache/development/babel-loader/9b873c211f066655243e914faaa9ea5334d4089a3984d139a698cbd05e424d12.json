{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { CheckBox, Input } from '@rneui/themed';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as Font from 'expo-font';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref2 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nfunction LoginScreen() {\n  return _jsx(SafeAreaView, {\n    children: _jsx(Button, {\n      title: \"Submit\",\n      onPress: TodoScreen\n    })\n  });\n}\nfunction RegistrationScreen() {\n  _jsx(SafeAreaView, {});\n}\nvar startTasks = [{\n  description: 'Task 1',\n  completed: true,\n  key: 1\n}, {\n  description: 'Task 2',\n  completed: true,\n  key: 2\n}];\nfunction TodoScreen() {\n  cacheFonts([FontAwesome.font]);\n  var _useState = useState(startTasks),\n    _useState2 = _slicedToArray(_useState, 2),\n    tasks = _useState2[0],\n    setTasks = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  var updateTask = function updateTask(task) {\n    task.completed = !task.completed;\n    setTasks(_toConsumableArray(tasks));\n  };\n  var addTask = function addTask() {\n    var maxKey = 0;\n    tasks.forEach(function (task) {\n      if (task.key > maxKey) {\n        maxKey = task.key;\n      }\n    });\n    setTasks([].concat(_toConsumableArray(tasks), [{\n      description: input,\n      completed: false,\n      key: maxKey + 1\n    }]));\n    console.log(tasks);\n    setInput('');\n  };\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(CheckBox, {\n      textStyle: item.completed ? {\n        textDecorationLine: 'line-through',\n        textDecorationStyle: 'solid'\n      } : undefined,\n      title: item.description,\n      checked: item.completed,\n      onPress: function onPress() {\n        return updateTask(item);\n      }\n    });\n  };\n  return _jsxs(SafeAreaView, {\n    style: [styles.container],\n    children: [_jsx(StatusBar, {\n      style: \"auto\"\n    }), _jsx(FlatList, {\n      data: tasks,\n      renderItem: renderItem\n    }), _jsx(Input, {\n      onChangeText: setInput,\n      value: input,\n      placeholder: \"New task...\"\n    }), _jsx(Button, {\n      title: \"Add\",\n      onPress: addTask\n    })]\n  });\n}\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      initialRouteName: \"Login\",\n      children: [_jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Registration\",\n        component: RegistrationScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Todo\",\n        component: TodoScreen\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","SafeAreaView","Button","FlatList","Text","View","CheckBox","Input","useCallback","useEffect","useState","Font","FontAwesome","React","NavigationContainer","createNativeStackNavigator","AsyncStorage","jsx","_jsx","jsxs","_jsxs","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref2","font","loadAsync","_x2","LoginScreen","children","title","onPress","TodoScreen","RegistrationScreen","startTasks","description","completed","key","_useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","input","setInput","updateTask","task","_toConsumableArray","addTask","maxKey","forEach","concat","console","log","renderItem","_ref","item","textStyle","textDecorationLine","textDecorationStyle","undefined","checked","style","styles","container","data","onChangeText","value","placeholder","Stack","App","Navigator","initialRouteName","Screen","name","component","create","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/Users/Frank/Desktop/DIG 4639C/dig4639-s24-react-rileybrunn/unit2/lab8/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, SafeAreaView, Button, FlatList, Text, View } from 'react-native';\nimport { CheckBox, Input } from '@rneui/themed';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as Font from 'expo-font';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nasync function cacheFonts(fonts) {\n  return fonts.map(async (font) => await Font.loadAsync(font));\n}\n\nfunction LoginScreen() {\n  return (\n    <SafeAreaView>\n    <Button title='Submit' onPress={TodoScreen}/>\n    </SafeAreaView>\n  )\n}\n\nfunction RegistrationScreen() {\n  <SafeAreaView>\n    \n  </SafeAreaView>\n}\n\nlet startTasks = [\n  {description: 'Task 1', completed: true, key: 1},\n  {description: 'Task 2', completed: true, key: 2}\n]\n\nfunction TodoScreen() {\n  cacheFonts([FontAwesome.font]);\n  let [tasks, setTasks] = useState(startTasks);\n  let [input, setInput] = useState('');\n  let updateTask = (task) => {\n    task.completed = !task.completed;\n    setTasks([...tasks]);\n  }\n  let addTask = () => {\n    let maxKey = 0;\n    tasks.forEach(task => {\n      if(task.key > maxKey) {\n        maxKey = task.key;\n      }\n    });\n    setTasks([...tasks, {\n      description: input,\n      completed: false,\n      key: maxKey+1\n    }]);\n    console.log(tasks);\n    setInput('');\n  }\n  let renderItem = ({ item }) => {\n    return <CheckBox\n    textStyle={ item.completed ? {\n      textDecorationLine: 'line-through', textDecorationStyle: 'solid'\n    } : undefined}\n    title={item.description}\n    checked={item.completed}\n    onPress={() => updateTask(item)} />\n  }\n  return (\n    <SafeAreaView style={[styles.container]}>\n      <StatusBar style='auto' />\n      <FlatList data={tasks} renderItem={renderItem} />\n      <Input \n      onChangeText={setInput}\n      value={input}\n      placeholder='New task...'\n      ></Input><Button title='Add' onPress={addTask}/>\n    </SafeAreaView>\n  );\n}\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName='Login'>\n        <Stack.Screen name='Login' component={LoginScreen} />\n        <Stack.Screen name='Registration' component={RegistrationScreen} />\n        <Stack.Screen name='Todo' component={TodoScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\n\n// async function cacheFonts(fonts) {\n//   return fonts.map(async (font) => await Font.loadAsync(font));\n// }\n\n// let startTasks = [\n//   {description: 'Task 1', completed: true, key: 1, relatedTasks: [2]},\n//   {description: 'Task 2', completed: true, key: 2}\n// ]\n\n// const Stack = createNativeStackNavigator();\n\n// function TodoScreen({navigation, tasks, setTasks}) {\n//   cacheFonts([FontAwesome.font]);\n//   let [input, setInput] = useState('');\n\n//   let updateTask = async (task) => {\n//     task.completed = !task.completed;\n//     setTasks([...tasks]);\n//     await AsyncStorage.setItem('@tasks', JSON.stringify(tasks));\n//   }\n//   let addTask = async () => {\n//     let maxKey = 0;\n//     tasks.forEach(task => {\n//       if(task.key > maxKey) {\n//         maxKey = task.key;\n//       }\n//     });\n//     let newTasks = [\n//       ...tasks, \n//       {\n//         description: input,\n//         completed: false,\n//         key: maxKey + 1\n//       }\n//     ]\n//     setTasks(newTasks);\n//     console.log(tasks);\n//     await AsyncStorage.setItem('@tasks', JSON.stringify(newTasks));\n//     setInput('');\n//   }\n//   let renderItem = ({ item }) => {\n//     return <CheckBox\n//     textStyle={ item.completed ? {\n//       textDecorationLine: 'line-through', textDecorationStyle: 'solid'\n//     } : undefined}\n//     title={item.description}\n//     checked={item.completed}\n//     onPress={() => updateTask(item)} />\n//   }\n// }\n\n\n\n// export default async function App() {\n//   let [tasks, setTasks] = useState(startTasks);\n//   useEffect(() => {\n//     async function getValue() {\n//       const value = await AsyncStorage.getItem('@tasks');\n//       if (value === null) {\n//         console.log(\n//           'Storing list of serialized tasks' +\n//           JSON.stringify(tasks)\n//         );\n//       await AsyncStorage.setItem('@tasks', JSON.stringify(tasks));\n//       } else {\n//         let parsedVal = JSON.parse(value);\n//         console.log('Retrieving list of serialized tasks');\n//         console.log(parsedVal);\n//           setTasks(JSON.parse(value));\n//       }\n//     }\n//     getValue();\n//   }, []);\n\n//   return (\n//     <NavigationContainer>\n//       <View style={styles.container}>\n//       <Stack.Navigator initialRouteName='Login'>\n//         <Stack.Screen name='Todo' component={TodoScreen}>\n//           {(props) => (\n//             <TodoScreen {...props} tasks={tasks} setTasks={setTasks} />\n//           )}\n//         </Stack.Screen>\n\n//         <Stack.Screen name='Login' component={LoginScreen}>\n//           {(props) => \n//           <LoginScreen {...props}/>\n//           }\n//         </Stack.Screen>\n\n//         <Stack.Screen name='Registration' component={RegistrationScreen}>\n//         {(props) => \n//           <RegistrationScreen {...props}/>\n//           }\n//         </Stack.Screen>\n//       </Stack.Navigator>\n//     <SafeAreaView style={[styles.container]}>\n//       <StatusBar style='auto' />\n//       <FlatList data={tasks} renderItem={renderItem} />\n//       <Input \n//       onChangeText={setInput}\n//       value={input}\n//       placeholder='New task...'\n//       ></Input><Button title='Add' onPress={addTask}/>\n//     </SafeAreaView>\n//     </View>\n//     </NavigationContainer>\n//   );\n// }\n\n\n\n// const styles = StyleSheet.create({\n//   container: {\n//     flex: 1,\n//     backgroundColor: '#fff',\n//     alignItems: 'center',\n//     justifyContent: 'center',\n//   },\n// });\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}