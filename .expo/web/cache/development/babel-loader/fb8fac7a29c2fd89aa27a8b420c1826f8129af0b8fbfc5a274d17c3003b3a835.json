{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { CheckBox, Input } from '@rneui/themed';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as Font from 'expo-font';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref5 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x3) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar startTasks = [{\n  description: 'Task 1',\n  completed: true,\n  key: 1,\n  relatedTasks: [2]\n}, {\n  description: 'Task 2',\n  completed: true,\n  key: 2\n}];\nvar Stack = createNativeStackNavigator();\nfunction TodoScreen(_ref) {\n  var navigation = _ref.navigation,\n    tasks = _ref.tasks,\n    setTasks = _ref.setTasks;\n  cacheFonts([FontAwesome.font]);\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    input = _useState2[0],\n    setInput = _useState2[1];\n  var updateTask = function () {\n    var _ref2 = _asyncToGenerator(function* (task) {\n      task.completed = !task.completed;\n      setTasks(_toConsumableArray(tasks));\n      yield AsyncStorage.setItem('@tasks', JSON.stringify(tasks));\n    });\n    return function updateTask(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var addTask = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      var maxKey = 0;\n      tasks.forEach(function (task) {\n        if (task.key > maxKey) {\n          maxKey = task.key;\n        }\n      });\n      var newTasks = [].concat(_toConsumableArray(tasks), [{\n        description: input,\n        completed: false,\n        key: maxKey + 1\n      }]);\n      setTasks(newTasks);\n      console.log(tasks);\n      yield AsyncStorage.setItem('@tasks', JSON.stringify(newTasks));\n      setInput('');\n    });\n    return function addTask() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var renderItem = function renderItem(_ref4) {\n    var item = _ref4.item;\n    return _jsx(CheckBox, {\n      textStyle: item.completed ? {\n        textDecorationLine: 'line-through',\n        textDecorationStyle: 'solid'\n      } : undefined,\n      title: item.description,\n      checked: item.completed,\n      onPress: function onPress() {\n        return updateTask(item);\n      }\n    });\n  };\n}\nexport default function App() {\n  return _App.apply(this, arguments);\n}\nfunction _App() {\n  _App = _asyncToGenerator(function* () {\n    var _useState3 = useState(startTasks),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tasks = _useState4[0],\n      setTasks = _useState4[1];\n    useEffect(function () {\n      function getValue() {\n        return _getValue.apply(this, arguments);\n      }\n      function _getValue() {\n        _getValue = _asyncToGenerator(function* () {\n          var value = yield AsyncStorage.getItem('@tasks');\n          if (value === null) {\n            console.log('Storing list of serialized tasks' + JSON.stringify(tasks));\n            yield AsyncStorage.setItem('@tasks', JSON.stringify(tasks));\n          } else {\n            var parsedVal = JSON.parse(value);\n            console.log('Retrieving list of serialized tasks');\n            console.log(parsedVal);\n            setTasks(JSON.parse(value));\n          }\n        });\n        return _getValue.apply(this, arguments);\n      }\n      getValue();\n    }, []);\n    return _jsx(NavigationContainer, {\n      children: _jsxs(View, {\n        style: styles.container,\n        children: [_jsxs(Stack.Navigator, {\n          initialRouteName: \"Login\",\n          children: [_jsx(Stack.Screen, {\n            name: \"Todo\",\n            component: TodoScreen,\n            children: function children(props) {\n              return _jsx(TodoScreen, _objectSpread(_objectSpread({}, props), {}, {\n                tasks: tasks,\n                setTasks: setTasks\n              }));\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"Login\",\n            component: LoginScreen,\n            children: function children(props) {\n              return _jsx(LoginScreen, _objectSpread({}, props));\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"Registration\",\n            component: RegistrationScreen,\n            children: function children(props) {\n              return _jsx(RegistrationScreen, _objectSpread({}, props));\n            }\n          })]\n        }), _jsxs(SafeAreaView, {\n          style: [styles.container],\n          children: [_jsx(StatusBar, {\n            style: \"auto\"\n          }), _jsx(FlatList, {\n            data: tasks,\n            renderItem: renderItem\n          }), _jsx(Input, {\n            onChangeText: setInput,\n            value: input,\n            placeholder: \"New task...\"\n          }), _jsx(Button, {\n            title: \"Add\",\n            onPress: addTask\n          })]\n        })]\n      })\n    });\n  });\n  return _App.apply(this, arguments);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","SafeAreaView","Button","FlatList","Text","View","CheckBox","Input","useCallback","useEffect","useState","Font","FontAwesome","React","NavigationContainer","createNativeStackNavigator","AsyncStorage","jsx","_jsx","jsxs","_jsxs","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref5","font","loadAsync","_x3","startTasks","description","completed","key","relatedTasks","Stack","TodoScreen","_ref","navigation","tasks","setTasks","_useState","_useState2","_slicedToArray","input","setInput","updateTask","_ref2","task","_toConsumableArray","setItem","JSON","stringify","_x2","addTask","_ref3","maxKey","forEach","newTasks","concat","console","log","renderItem","_ref4","item","textStyle","textDecorationLine","textDecorationStyle","undefined","title","checked","onPress","App","_App","_useState3","_useState4","getValue","_getValue","value","getItem","parsedVal","parse","children","style","styles","container","Navigator","initialRouteName","Screen","name","component","props","_objectSpread","LoginScreen","RegistrationScreen","data","onChangeText","placeholder","create","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/Users/Frank/Desktop/DIG 4639C/dig4639-s24-react-rileybrunn/unit2/lab8/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, SafeAreaView, Button, FlatList, Text, View } from 'react-native';\nimport { CheckBox, Input } from '@rneui/themed';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as Font from 'expo-font';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport * as React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n\nasync function cacheFonts(fonts) {\n  return fonts.map(async (font) => await Font.loadAsync(font));\n}\n\nlet startTasks = [\n  {description: 'Task 1', completed: true, key: 1, relatedTasks: [2]},\n  {description: 'Task 2', completed: true, key: 2}\n]\n\nconst Stack = createNativeStackNavigator();\n\nfunction TodoScreen({navigation, tasks, setTasks}) {\n  cacheFonts([FontAwesome.font]);\n  let [input, setInput] = useState('');\n\n  let updateTask = async (task) => {\n    task.completed = !task.completed;\n    setTasks([...tasks]);\n    await AsyncStorage.setItem('@tasks', JSON.stringify(tasks));\n  }\n  let addTask = async () => {\n    let maxKey = 0;\n    tasks.forEach(task => {\n      if(task.key > maxKey) {\n        maxKey = task.key;\n      }\n    });\n    let newTasks = [\n      ...tasks, \n      {\n        description: input,\n        completed: false,\n        key: maxKey + 1\n      }\n    ]\n    setTasks(newTasks);\n    console.log(tasks);\n    await AsyncStorage.setItem('@tasks', JSON.stringify(newTasks));\n    setInput('');\n  }\n  let renderItem = ({ item }) => {\n    return <CheckBox\n    textStyle={ item.completed ? {\n      textDecorationLine: 'line-through', textDecorationStyle: 'solid'\n    } : undefined}\n    title={item.description}\n    checked={item.completed}\n    onPress={() => updateTask(item)} />\n  }\n}\n\n\n\nexport default async function App() {\n  let [tasks, setTasks] = useState(startTasks);\n  useEffect(() => {\n    async function getValue() {\n      const value = await AsyncStorage.getItem('@tasks');\n      if (value === null) {\n        console.log(\n          'Storing list of serialized tasks' +\n          JSON.stringify(tasks)\n        );\n      await AsyncStorage.setItem('@tasks', JSON.stringify(tasks));\n      } else {\n        let parsedVal = JSON.parse(value);\n        console.log('Retrieving list of serialized tasks');\n        console.log(parsedVal);\n          setTasks(JSON.parse(value));\n      }\n    }\n    getValue();\n  }, []);\n\n  return (\n    <NavigationContainer>\n      <View style={styles.container}>\n      <Stack.Navigator initialRouteName='Login'>\n        <Stack.Screen name='Todo' component={TodoScreen}>\n          {(props) => (\n            <TodoScreen {...props} tasks={tasks} setTasks={setTasks} />\n          )}\n        </Stack.Screen>\n\n        <Stack.Screen name='Login' component={LoginScreen}>\n          {(props) => \n          <LoginScreen {...props}/>\n          }\n        </Stack.Screen>\n\n        <Stack.Screen name='Registration' component={RegistrationScreen}>\n        {(props) => \n          <RegistrationScreen {...props}/>\n          }\n        </Stack.Screen>\n      </Stack.Navigator>\n    <SafeAreaView style={[styles.container]}>\n      <StatusBar style='auto' />\n      <FlatList data={tasks} renderItem={renderItem} />\n      <Input \n      onChangeText={setInput}\n      value={input}\n      placeholder='New task...'\n      ></Input><Button title='Add' onPress={addTask}/>\n    </SafeAreaView>\n    </View>\n    </NavigationContainer>\n  );\n}\n\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}